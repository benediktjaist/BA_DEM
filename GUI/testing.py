# Form implementation generated from reading ui file 'SecondWindow.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.back = QtWidgets.QPushButton(parent=self.centralwidget)
        self.back.setGeometry(QtCore.QRect(610, 480, 168, 51))
        self.back.setObjectName("back")
        self.position = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.position.setGeometry(QtCore.QRect(290, 100, 113, 35))
        self.position.setObjectName("position")
        self.velocity = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.velocity.setGeometry(QtCore.QRect(290, 180, 113, 34))
        self.velocity.setObjectName("velocity")
        self.n_Particles = QtWidgets.QSpinBox(parent=self.centralwidget)
        self.n_Particles.setGeometry(QtCore.QRect(150, 30, 56, 34))
        self.n_Particles.setMinimum(1)
        self.n_Particles.setObjectName("n_Particles")
        self.n_Particles_lab = QtWidgets.QLabel(parent=self.centralwidget)
        self.n_Particles_lab.setGeometry(QtCore.QRect(20, 30, 121, 29))
        self.n_Particles_lab.setObjectName("n_Particles_lab")
        self.pos_lab = QtWidgets.QLabel(parent=self.centralwidget)
        self.pos_lab.setGeometry(QtCore.QRect(30, 110, 231, 29))
        self.pos_lab.setObjectName("pos_lab")
        self.vel_lab = QtWidgets.QLabel(parent=self.centralwidget)
        self.vel_lab.setGeometry(QtCore.QRect(30, 180, 231, 29))
        self.vel_lab.setObjectName("vel_lab")
        self.rad_lab = QtWidgets.QLabel(parent=self.centralwidget)
        self.rad_lab.setGeometry(QtCore.QRect(40, 260, 231, 29))
        self.rad_lab.setObjectName("rad_lab")
        self.radius = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.radius.setGeometry(QtCore.QRect(300, 250, 113, 35))
        self.radius.setObjectName("radius")
        self.stiffnes_lab = QtWidgets.QLabel(parent=self.centralwidget)
        self.stiffnes_lab.setGeometry(QtCore.QRect(40, 330, 231, 29))
        self.stiffnes_lab.setObjectName("stiffnes_lab")
        self.stiffnes = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.stiffnes.setGeometry(QtCore.QRect(300, 330, 113, 34))
        self.stiffnes.setObjectName("stiffnes")
        self.mass = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.mass.setGeometry(QtCore.QRect(300, 400, 113, 34))
        self.mass.setObjectName("mass")
        self.mass_lab = QtWidgets.QLabel(parent=self.centralwidget)
        self.mass_lab.setGeometry(QtCore.QRect(40, 400, 231, 29))
        self.mass_lab.setObjectName("mass_lab")
        self.rand_posi = QtWidgets.QCheckBox(parent=self.centralwidget)
        self.rand_posi.setGeometry(QtCore.QRect(450, 110, 122, 33))
        self.rand_posi.setObjectName("rand_posi")
        self.rand_vel = QtWidgets.QCheckBox(parent=self.centralwidget)
        self.rand_vel.setGeometry(QtCore.QRect(460, 180, 122, 33))
        self.rand_vel.setObjectName("rand_vel")
        self.rand_radius = QtWidgets.QCheckBox(parent=self.centralwidget)
        self.rand_radius.setGeometry(QtCore.QRect(460, 250, 122, 33))
        self.rand_radius.setObjectName("rand_radius")
        self.rand_stiffnes = QtWidgets.QCheckBox(parent=self.centralwidget)
        self.rand_stiffnes.setGeometry(QtCore.QRect(460, 330, 122, 33))
        self.rand_stiffnes.setObjectName("rand_stiffnes")
        self.rand_mass = QtWidgets.QCheckBox(parent=self.centralwidget)
        self.rand_mass.setGeometry(QtCore.QRect(460, 400, 122, 33))
        self.rand_mass.setObjectName("rand_mass")
        self.intersecting_Particles = QtWidgets.QRadioButton(parent=self.centralwidget)
        self.intersecting_Particles.setGeometry(QtCore.QRect(430, 10, 341, 81))
        self.intersecting_Particles.setObjectName("intersecting_Particles")
        self.Add_Particle = QtWidgets.QPushButton(parent=self.centralwidget)
        self.Add_Particle.setGeometry(QtCore.QRect(170, 480, 201, 38))
        self.Add_Particle.setObjectName("Add_Particle")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # Connect the signal of n_Particles to update mass_lab text
        self.n_Particles.valueChanged.connect(self.update_mass_lab_text)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.back.setText(_translate("MainWindow", "save and close"))
        self.position.setText(_translate("MainWindow", "500,500"))
        self.velocity.setText(_translate("MainWindow", "50,50"))
        self.n_Particles_lab.setText(_translate("MainWindow", "n Particles"))
        self.pos_lab.setText(_translate("MainWindow", "Position for Particle n"))
        self.vel_lab.setText(_translate("MainWindow", "Velocity for Particle n"))
        self.rad_lab.setText(_translate("MainWindow", "Radius for Particle n"))
        self.radius.setText(_translate("MainWindow", "50"))
        self.stiffnes_lab.setText(_translate("MainWindow", "Elstiffnesn for Particle n"))
        self.stiffnes.setText(_translate("MainWindow", "2000"))

        self.mass.setText(_translate("MainWindow", "100"))
        #self.mass_lab.setText(_translate("MainWindow", "Mass for Particle n"))
        n_particles = self.n_Particles.value()
        self.mass_lab.setText(f"Mass for Particle {n_particles}")

        self.rand_posi.setText(_translate("MainWindow", "random"))
        self.rand_vel.setText(_translate("MainWindow", "random"))
        self.rand_radius.setText(_translate("MainWindow", "random"))
        self.rand_stiffnes.setText(_translate("MainWindow", "random"))
        self.rand_mass.setText(_translate("MainWindow", "random"))
        self.intersecting_Particles.setText(_translate("MainWindow", "exclude intersecting Particles"))
        self.Add_Particle.setText(_translate("MainWindow", "Add Particle"))

    def update_mass_lab_text(self, value):
        self.mass_lab.setText(f"Mass for Particle {value}")



class SecondWindow(QtWidgets.QMainWindow, Ui_MainWindow):

    list_of_particles = QtCore.pyqtSignal(list)

    def __init__(self, *args, obj=None, **kwargs):
        super(SecondWindow, self).__init__(*args, **kwargs)
        self.setupUi(self)
        self.back.clicked.connect(self.second_close)
        self.Add_Particle.clicked.connect(self.add_particle)
        self.counter = 1

    def add_particle(self):
        particle = self.create_particle()
        if particle is not None:
            self.particles.append(particle)
            self.counter += 1
            self.current_Particle.display(self.counter)

    def create_particle(self):
        position_str = self.position.text().split(',')
        velocity_str = self.velocity.text().split(',')
        radius = float(self.radius.text())
        elstiffnessn = float(self.stiffnes.text())
        mass = float(self.mass.text())

        try:
            position = np.array([float(position_str[0]), float(position_str[1]), 0])
            velocity = np.array([float(velocity_str[0]), float(velocity_str[1]), 0])
        except ValueError:
            # If the position or velocity strings cannot be converted to arrays, show an error message
            QtWidgets.QMessageBox.warning(self, "Error", "Invalid position or velocity.")
            return None

        particle = Particle(position=position, velocity=velocity, acceleration=np.array([0, 0, 0]),
                            force=np.array([0, 0, 0]), rotation=np.array([0, 0, 0]),
                            rotation_vel=np.array([0, 0, 0]), rotation_acc=np.array([0, 0, 0]),
                            torque=np.array([0, 0, 0]), radius=radius, elstiffnessn=elstiffnessn, mass=mass,
                            pred_position=np.array([0, 0, 0]), interpenetration_vel=np.array([0, 0, 0]))
        return particle

    def second_close(self):
        self.list_of_particles.emit(self.particles)
        self.close()

    def setup_initial_ui(self):
        self.particles = []
        self.current_Particle.display(1)



